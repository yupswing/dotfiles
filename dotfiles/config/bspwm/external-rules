#!/bin/sh

# BSPWM External rules =======================================================
# This script will execute at each new window instance
# External rules are applied AFTER interval ones and here we receive the
# the current applied properties in the variable $consequences
# =============================================================================

# =============================================================================
# DEBUG
# Set DEBUG=1 to see info about new windows

log() {
  echo "============================================================================="
  xprop -id $wid >>$DEBUG_FILE
  echo -e "-----------------------------------------------------------------------------" >>$DEBUG_FILE
  echo -e "CLASS: $class\nINSTANCE: $instance\nTYPE: $type\nROLE: $role\nNAME: $name\nCONSEQUENCES: $consequences" >>$DEBUG_FILE
  echo -e "=============================================================================\n\n\n" >>$DEBUG_FILE
}

# tail -f /tmp/bspwm_external_rules_debug
DEBUG_FILE=/tmp/bspwm_external_rules_debug
DEBUG=no

# =============================================================================
# WINDOW INFORMATIONS

# It receives the following arguments
wid=$1
class=$2
instance=$3
consequences=$4

# Identify the name
name=$(xprop -id $wid WM_NAME | sed -r -e "s/^.*\"([^\"]*)\"$/\1/")

# Identify the type
# If no type is identified these are the messages, converted to NORMAL
# XXX:  no such atom on any window.  # _NET_WM_WINDOW_TYPE:  not found.
type=$(xprop -id $wid _NET_WM_WINDOW_TYPE | sed "s/^.*TYPE_//")
[[ "$type" == *"not found"* ]] && type="NORMAL"
# Possible tytpes (removed WM_WINDOW_TYPE_ to make it easier)
# 'NORMAL', 'DIALOG', 'UTILITY', 'TOOLBAR', 'SPLASH', 'MENU',
# 'DROPDOWN_MENU', 'POPUP_MENU', 'TOOLTIP', 'NOTIFICATION'

# Identify the role
role=$(xprop -id $wid WM_WINDOW_ROLE | sed -r -e "s/^.*:  no.*$//" -e "s/^.*\"([^\"]*)\"$/\1/")

# Firefox pop-up (give the same role as chrome pop-ups)
# (Firefox pop-up always have HINTS location at 0,0)
if [[ "$class" = "firefox" ]] &&
  [[ "$(xprop -id $wid WM_NORMAL_HINTS)" == *"program specified location: 0, 0"* ]]; then
  role="pop-up"
fi

# Log window information
[ $DEBUG = yes ] && log

# =============================================================================
# AVOID DIALOGS BEING BOUNDED TO A DESKTOP
# With a desktop rule in the internal ones also all the dialogs would be bounded
# to a desktop. With this rule we let the dialog to be open in the current desktop
# (Sometimes an app is opened with a rule for a desktop but then is moved around)

# role=pop-up # chrome
if [ "$type" = "DIALOG" ] || [ "$role" = "pop-up" ]; then
  echo "state=floating desktop=off fullscreen=off"
fi

# =============================================================================
# RULES FOR "SLOW" PROCESSES

# ONLY if there is no CLASS name it will loop until it finds one.
# This is needed for some electron applications which set
# their CLASS a while after launch (like Spotify)

sloths() {
  # Log window information
  [ $DEBUG = yes ] && log

  case "$class" in
  Spotify)
    echo "desktop=music follow=on"
    ;;
  "")
    sleep 0.5
    wm_class=($(xprop -id $wid | grep "WM_CLASS" | grep -Po '"\K[^,"]+'))
    class=${wm_class[-1]}
    [[ ${#wm_class[@]} == "2" ]] && instance=${wm_class[0]}
    [[ -n "$class" ]] && sloths
    ;;
  esac
}
[ -z $class ] && sloths
